# -*- coding: utf-8 -*-
"""Online Retail Sales Performance - Rakamin Trial Class .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gvd-M2_axQYnoznr7giejaxhEVjTO-DN

### Homework Rakamin Trial Class - Mini Case

# Mengukur Performa Penjualan Ritel Online

## Load Data
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

import warnings
warnings.filterwarnings("ignore")

df_dataset = pd.read_csv('/content/online_retail_II .csv')

df_dataset.info()

df_dataset.columns

df_dataset.head()

df_dataset.tail()

"""# Section 1

### Create New Feature: Year
"""

df_dataset['InvoiceDate'] = pd.to_datetime(df_dataset['InvoiceDate'])
df_dataset['InvoiceDate']

df_dataset['year'] = pd.DatetimeIndex(df_dataset['InvoiceDate']).year
df_dataset['year']

"""### Filtering Data"""

sales = df_dataset[(df_dataset['Quantity'] >= 1) & (-df_dataset['Invoice'].str.contains('C',regex=True))]
sales

"""## Revenue"""

sales[['Quantity','Price']].head()

sales['Revenue'] = (sales['Quantity']) * (sales['Price'])

sales['Revenue'].reset_index()

"""### Average of Revenue per Year"""

sales['Revenue'].mean()

sales.groupby('year')['Revenue'].mean().reset_index()

"""### Interpretation"""

x = ["2009",'2010','2011']
y = [18.713273,19.908987,20.058767]
plt.plot(x, y)

plt.xlabel('year')
plt.ylabel('Revenue')

plt.title('average')
plt.grid(True)

plt.show()

#pera = percentage keinakan yang terjadi pada tahun 2009 - 2010
pera= (19.908987-18.713273)/18.713273
pera

#perb = percentage keinakan yang terjadi pada tahun 2009 - 2010
perb=(20.058767-19.908987)/19.908987
perb

"""There was a significant increase in revenue from 2009 to 2010 by 6.4%. whereas in 2010 to 2011 only 0.75%.

# Section 2

### Filtering Data

### Customers who finished their purchases
"""

finished = df_dataset[(df_dataset['Quantity'] >= 1) & (-df_dataset['Invoice'].str.contains('C',regex=True))]
finished

Cust_notna=finished[finished['Customer ID'].notna()]
Cust_notna

"""#### finished transaction each year"""

# Number of Finished Transaction
sfinished = Cust_notna['Invoice'].count()
sfinished

Cust_notna.groupby('year')['Invoice'].count().reset_index()

x = ["2009",'2010','2011']
y = [30761,403094,371765]
plt.plot(x, y)

plt.xlabel('Year')
plt.ylabel('Customer')

plt.title('Finished Transactions Each Year')
plt.grid(True)

plt.show()

"""
## Customers who canceled their purchases"""

cancel= df_dataset[ df_dataset['Invoice'].str.contains('C',regex=True)]
cancel

"""### Canceled Transactions Each Year"""

# Number of Canceled Transactions
scancel = cancel['Invoice'].count()
scancel

cancel.groupby('year')['Invoice'].count().reset_index()

x = ["2009",'2010','2011']
y = [1015,9919,8560]
plt.plot(x, y)

plt.xlabel('Year')
plt.ylabel('Customer')

plt.title('canceled Transactions Each Year')
plt.grid(True)

plt.show()

"""## **Interpretation**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
Tahun = ['2009', ' 2010', '2011']
Finished = [30761,403094,371765]
Cancel = [1015,9919,8560]

x = np.arange(len(Tahun))
width = 0.35

fig, ax = plt.subplots(figsize=(12, 7))

Fins = ax.bar(x - width/2, Finished, width, label='Finished Transaction', color='Blue')
Canc = ax.bar(x + width/2, Cancel, width, label='Cancel Transaction', color='Orange')

ax.set_title('Finished Transactions Each Year', size=18)
ax.set_ylabel('Transaction', size=18)
ax.set_xticks(x)
ax.set_xticklabels(Tahun, size=16)
ax.legend(fontsize=14)

plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

plt.style.use('ggplot')

X = np.arange(len(Tahun))
y1 = np.array([30761,403094,371765])
y2 = np.array([1015,9919,8560])

fig, ax = plt.subplots(figsize=(10,6))

plt.plot(y1, color='orange')
plt.plot(y2, color='blue')

plt.show()

"""## Customer Rate

### Number of Customer
"""

sum_cust = df_dataset['Invoice'].count()
sum_cust

scustomer = df_dataset.groupby('year')['Invoice'].count().reset_index()
scustomer

scustomer['rate'] = scustomer['Invoice']/sum_cust*100
scustomer[['year', 'Invoice', 'rate']].head()

# The slices will be ordered and plotted counter-clockwise.
labels = df['year']
sizes = scustomer['rate']
colors = ['#FFB600', '#09A0DA','#8464a0']

# explode a slice if required
explode = (0, 0, 0) 
# Font size of text in donut chart
textprops = {'fontsize':14,'color':'black'}
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
# Show data in 0.00%
 autopct='%.2f%%', 
 pctdistance =0.9,
 shadow=False,
 textprops =textprops,
 wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'},)
 
#draw a circle at the center of pie to make it look like a donut
centre_circle = plt.Circle((0,0),0.65,color='grey', fc='white',linewidth=1.00)
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.axis('equal') # Set aspect ratio to be equal so that pie is      drawn as a circle.
plt.show()

"""### Finished customer rate"""

fin_cust = Cust_notna.groupby('year')['Invoice'].count().reset_index()
fin_cust

fin_cust['rate'] = fin_cust['Invoice']/sum_cust*100
fin_cust[['year', 'Invoice', 'rate']].head()

# The slices will be ordered and plotted counter-clockwise.
labels = df['year']
sizes = fin_cust['rate']
colors = ['#FFB600', '#09A0DA','#8464a0']

# explode a slice if required
explode = (0, 0, 0) 
# Font size of text in donut chart
textprops = {'fontsize':14,'color':'black'}
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
# Show data in 0.00%
 autopct='%.2f%%', 
 pctdistance =0.9,
 shadow=False,
 textprops =textprops,
 wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'},)
 
#draw a circle at the center of pie to make it look like a donut
centre_circle = plt.Circle((0,0),0.65,color='grey', fc='white',linewidth=1.00)
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.axis('equal') # Set aspect ratio to be equal so that pie is      drawn as a circle.
plt.show()

"""### Canceled customer rate"""

cancel_cust = cancel.groupby('year')['Invoice'].count().reset_index()
cancel_cust

cancel_cust['rate'] = cancel_cust['Invoice']/sum_cust*100
cancel_cust[['year', 'Invoice', 'rate']].head()

# The slices will be ordered and plotted counter-clockwise.
labels = df['year']
sizes = cancel_cust['rate']
colors = ['#FFB600', '#09A0DA','#8464a0']

# explode a slice if required
explode = (0, 0, 0) 
# Font size of text in donut chart
textprops = {'fontsize':14,'color':'black'}
plt.pie(sizes, explode=explode, labels=labels, colors=colors,
# Show data in 0.00%
 autopct='%.2f%%', 
 pctdistance =0.9,
 shadow=False,
 textprops =textprops,
 wedgeprops={'linewidth': 3.0, 'edgecolor': 'white'},)
 
#draw a circle at the center of pie to make it look like a donut
centre_circle = plt.Circle((0,0),0.65,color='grey', fc='white',linewidth=1.00)
fig = plt.gcf()
fig.gca().add_artist(centre_circle)
plt.axis('equal') # Set aspect ratio to be equal so that pie is      drawn as a circle.
plt.show()

"""### Interpretation

Conclusion: The performance of online retail sales with the most transactions occurred in 2010 amounting to 48.97%, with successful transactions of 50.04% and failed transactions of 50.88%. whereas in the previous year, 2009 was only 4.24% with 3.82% successful transactions and 5.21% failed transactions. however in 2011 there was a decrease in transactions to 46.79%. with 46.15% of successful transactions and 43.91% of failed transactions. The percentage is taken from the total transactions that occurred in 2009 to 2011.
"""

